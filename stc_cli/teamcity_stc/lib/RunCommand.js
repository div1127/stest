"use strict";function _interopRequireDefault(a){return a&&a.__esModule?a:{"default":a}}var _getIterator2=require("babel-runtime/core-js/get-iterator"),_getIterator3=_interopRequireDefault(_getIterator2),_promise=require("babel-runtime/core-js/promise"),_promise2=_interopRequireDefault(_promise),_getPrototypeOf=require("babel-runtime/core-js/object/get-prototype-of"),_getPrototypeOf2=_interopRequireDefault(_getPrototypeOf),_classCallCheck2=require("babel-runtime/helpers/classCallCheck"),_classCallCheck3=_interopRequireDefault(_classCallCheck2),_createClass2=require("babel-runtime/helpers/createClass"),_createClass3=_interopRequireDefault(_createClass2),_possibleConstructorReturn2=require("babel-runtime/helpers/possibleConstructorReturn"),_possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2),_inherits2=require("babel-runtime/helpers/inherits"),_inherits3=_interopRequireDefault(_inherits2),App=require("orion-core/lib/model/cmd/App"),ArchiveReporter=require("orion-core/lib/reporter/ArchiveReporter"),CmdClient=require("orion-core/lib/cmd/Client"),CmdManager=require("orion-core/lib/cmd/Manager"),File=require("orion-core/lib/fs/File"),Observable=require("orion-core/lib/Observable"),Project=require("orion-core/lib/model/test/Project"),InBrowserRunner=require("orion-core/lib/test/InBrowserRunner"),SandboxRunner=require("orion-core/lib/test/SandboxRunner"),Workspace=require("orion-core/lib/model/Workspace"),xfs=require("orion-core/lib/xfs"),Url=require("url"),JUnitReporter=require("./reporter/JUnitReporter"),TeamCityReporter=require("./reporter/TeamCityReporter"),TextReporter=require("./reporter/TextReporter"),IntegrationClient=require("orion-core/lib/integration/Client"),JiraClient=require("orion-core/lib/integration/JiraClient"),RemoteClient=require("orion-core/lib/archive/Client"),IntegrationClasses={jira:JiraClient},reporterMap={archive:ArchiveReporter,junit:JUnitReporter,teamcity:TeamCityReporter,text:TextReporter},console=require("orion-core/lib/util/console-manager").console,logger=require("orion-core/lib/Logger").getInstance().forClass("RunCommand"),RunCommand=function(a){function b(){return(0,_classCallCheck3["default"])(this,b),(0,_possibleConstructorReturn3["default"])(this,(b.__proto__||(0,_getPrototypeOf2["default"])(b)).apply(this,arguments))}return(0,_inherits3["default"])(b,a),(0,_createClass3["default"])(b,[{key:"execute",value:function(){logger.trace("execute");var a=this,b=a.scenarioDir,c=a.scenarioName,d=a.poolName;Workspace.find(b).then(function(a){return logger.debug("Scenario found at "+a),Workspace.load(a)}).then(function(e){logger.debug("Workspace loaded"),e.error&&(logger.error("workspace load error: "+e.error),process.exit(1));var f,g,h,i,j=e.getTestScenario(c?null:b,c);a._assertNotNull(j,"No test scenario found on "+b),f=a._getPool(d,e),g=a._getArchivePath(e,j.project.owner),h=_promise2["default"].resolve(),(a.archiveServer||a.storageKey||a.pushFailures)&&(a.archiveServer||(logger.error("An archive server '-S' is required to use a storage key."),process.exit(1)),a.storageKey||(logger.error("A storage key '-K' is required to use an archive server."),process.exit(1)),i=new RemoteClient({server:a.archiveServer}),h=a._validateStorageKey(i).then(function(){if(a.pushFailures)return a.servicePassword||(logger.error("A password '(--integrationPassword)' is required to use issue integration."),process.exit(1)),a._resolveProject(i).then(function(b){return a.project=b,a._validateIntegration(i)})})),h.then(function(){a._runScenario(j,{pool:f,output:a.output,archivePath:g,archiveClient:i,pushFailures:a.pushFailures,servicePassword:a.servicePassword})})["catch"](function(a){logger.error(a.stack||a),process.exit(1)})})["catch"](function(a){logger.error(a.stack||a),process.exit(1)})}},{key:"_getArchivePath",value:function(a,b){var c="",d=a.get("tests");if(d&&d.archivePath&&(c=d.archivePath),b.isApp||b.isPackage){var e=b.get("tests");e&&e.archivePath&&(c+=e.archivePath)}return c}},{key:"_runScenario",value:function(a,b){logger.trace("_runScenario");var c=this,d=b.archivePath,e=b.pool,f=c._getRunner(a,d),g=new _promise2["default"](function(a,b){logger.debug("Starting proxy"),f.startProxy(),f.proxy.on("started",function(b){var c=b.port;logger.debug("Proxy listening on port"+c),a(c)}),f.proxy.on("error",function(a){process.exitCode=1,logger.error(a.stack||a),b(a)})});f.on("terminated",function(a){logger.debug("Runner terminated");var d=a.passed,g=e.farm.stopTunnel?e.farm.stopTunnel():_promise2["default"].resolve();g.then(function(){return f.archiver.flush()}).then(function(){var a,d,e,g,h=f.archiver,i=h.basedir.path,j=h.storageKey,k=_promise2["default"].resolve(),l=h.server;return b.pushFailures?b.servicePassword?(d=new RemoteClient({server:l}),logger.debug("Retrieving archiveRoot..."),d.getArchiveRoot(j).then(function(f){return logger.debug("archiveRoot retrieved successfully: "+f.archiveRoot),a=f.archiveRoot,logger.debug("Retrieving connection..."),d.getConnection().then(function(d){return(g=d)?(logger.debug("Connection retrieved successfully"),g.password=b.servicePassword,g.project=c.project,e=ArchiveReporter.getFailedTests(new File(i)),IntegrationClient.processIssues({archivePath:h.archivePath,archiveServer:l,archiveRoot:a,failures:e,buildNumber:h.buildNumber,storageKey:j,connection:g})):_promise2["default"].reject("No credential could be found to connect to the service. Please create an alm.json file containing the appropriate connection details.")})["catch"](function(a){return process.exitCode=1,_promise2["default"].reject(a)})})["catch"](function(a){return process.exitCode=1,_promise2["default"].reject(a)})):_promise2["default"].reject("A password must be provided in order to push failures to issue tracking service."):k}).then(function(){setTimeout(function(){logger.debug("Exiting"),process.exit(d&&!process.exitCode?0:1)},1e3)})["catch"](function(a){logger.error(a.stack||a),setTimeout(function(){process.exit(1)},1e3)})}),g.then(function(b){var c=a.project.owner;if(c.isApp&&c.get("launchAppWatch"))return c.launch(a.get("profile"))}).then(function(){logger.debug("Starting test run");var b={globals:a.getGlobals()};return f.startTestRun({files:a.getFiles(),browsers:e.browsers,capabilities:c._getCapabilities(),enableCodeCoverage:c.coverage,testOptions:b})})["catch"](function(a){logger.error(a.stack||a),process.exit(1)})}},{key:"_getRunner",value:function(a,b){logger.trace("_getRunner");var c,d,e,f,g,h,i,j,k=this,l=Array.isArray(k.output)?k.output:[k.output],m=a.getCalculatedTargetUrl(),n=Url.parse(m);return c=new ArchiveReporter({buildNumber:k.buildNumber,scenario:a,server:k.archiveServer,storageKey:k.storageKey,archivePath:b,overwrite:k.overwrite,workdir:k.workdir,baselinedir:k.baselinedir&&new File(k.baselinedir)}),e=[c],l.forEach(function(c){"archive"!==c&&e.push(new reporterMap[c]({scenario:a,archivePath:b,workdir:k.workdir}))}),n.hostname||(d=!0),g=a.get("sandbox")?SandboxRunner:InBrowserRunner,j=k.cmdPath,j?h=new CmdClient({directory:j}):(i=new CmdManager,h=i.current),f=new g({scenario:a,cmdClient:h,archiver:c,reporter:e,noProxy:d,port:k.proxyPort,callbackAddress:k.callbackAddress,enableCodeCoverage:k.coverage,autoStartTunnel:k.autoStartTunnel,remoteTimeout:k.timeout})}},{key:"_assertNotNull",value:function(a,b){null==a&&(logger.error(b),process.exit(1))}},{key:"_getPool",value:function(a,b){logger.trace("_getPool");var c=this,d=[];b.eachFarm(function(b){d=d.concat(b.getPools(a))});var e=c._validatePool(d,a,b);return c.username&&e.farm.set("username",c.username),c.accessKey&&e.farm.set("accessKey",c.accessKey),e}},{key:"_resolveProject",value:function(a){var b,c=this;return logger.debug("Resolving Integration Project"),a.getConnection().then(function(a){return b=a,b?c.project?_promise2["default"].resolve(c.project):b.project?_promise2["default"].resolve(b.project):_promise2["default"].reject("No project specified. Specify with '--integrationProject'."):_promise2["default"].reject("No credential could be found to connect to the service. Please create an alm.json file containing the appropriate connection details.")})}},{key:"_validatePool",value:function(a,b,c){logger.trace("_validatePool");var d,e,f,g,h=a.length||0,i=h&&a[0],j=[];for(d=0;d<h;d++)if(f=a[d].name.toLowerCase(),g=b.toLowerCase(),f===g){i=a[d],e=!0;break}return b?i?!e&&h>1?j.push("Multiple pools found by name: "+b):i.farm||j.push("Pool "+i.name+" is not associated with a browser farm"):j.push("No such browser pool: "+b):j.push("No browser pool was specified"),j.length&&(j.push(""),j.push("Available browser pools:"),c.eachFarm(function(a){j.push("    "+a.get("name")),a.eachPool(function(a){j.push("        "+a.name)})}),logger.error(j.join("\n")),process.exit(1)),i}},{key:"_validateIntegration",value:function(a){var b,c,d=this;return logger.debug("Validating integration credentials"),a.getConnection().then(function(a){return a?(a.password=d.servicePassword,b=IntegrationClasses[a.type],c=new b(a),c.validateUser()):_promise2["default"].reject("No credential could be found to connect to the service. Please create an alm.json file containing the appropriate connection details.")}).then(function(){return c.validateProject(d.project)})}},{key:"_validateStorageKey",value:function(a){var b=this;return logger.debug("Validating storageKey"),a.getArchiveRoot(b.storageKey).then(function(c){var d={storageKey:b.storageKey,archiveRoot:c.archiveRoot};return a.validateStorageKey(d)}).then(function(a){return a.success||_promise2["default"].reject("Invalid storage key")})}},{key:"_getCapabilities",value:function(){var a=this.capabilities||[],b={};Array.isArray(a)||(a=[a]);var c=!0,d=!1,e=void 0;try{for(var f,g=(0,_getIterator3["default"])(a);!(c=(f=g.next()).done);c=!0){var h=f.value,i=h.split("="),j=void 0,k=void 0;2===i.length?(j=i[0],k=i[1],isNaN(k)?"true"===k?k=!0:"false"===k&&(k=!1):k=+k,b[j]=k):logger.warn("Capability",h,"is not a valid key=value pair")}}catch(l){d=!0,e=l}finally{try{!c&&g["return"]&&g["return"]()}finally{if(d)throw e}}return b}}]),b}(Observable);module.exports=RunCommand;