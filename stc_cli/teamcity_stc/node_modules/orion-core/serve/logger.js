(function () {
    var _levels = {
            'ERROR': 0,
            'WARN':  1,
            'INFO':  2,
            'DEBUG': 3,
            'TRACE': 4,
            'TICK':  5
        },
        _objectIdSeed = 0;

    function _normalizeLevel (level) {
        var requestedLevel = level;

        if (typeof level === 'string') {
            level = level.toUpperCase();
            level = _levels[level];
        }

        if (level == null) {
            throw new Error('Unknown log level: ' + requestedLevel);
        }

        return level;
    }

    function Logger (_className, _level, _handlers) {
        var me = this,
            _childLoggers = [],
            _tickLevel = _levels['TICK'],
            _tick,
            _name;

        _level = _normalizeLevel(_level);
        _handlers = (_handlers && _handlers.slice) ? _handlers.slice() : [];

        function Tick (logger) {
            var me = this,
                lastTick = +new Date();

            me.tack = function (message) {
                if (_level < _tickLevel) {
                    return;
                }

                var now = +new Date(),
                    elapsed = now - lastTick;

                lastTick = now;
                logger.trace('[' + elapsed + 'ms] ' + message);
            }
        }

        function _log (msgLevel, msg) {
            var msgLevelName = msgLevel,
                i;    
            msgLevel = _normalizeLevel(msgLevel);

            if (msgLevel <= _level) {
                msg = [].join.call(msg, ' ');
                msg = '[' + msgLevelName + '] '
                    + (_className ? '[' + _className + '] ' : '')
                    + msg;

                if (console && console.log) {   // eslint-disable-line
                    console.log(msg);           // eslint-disable-line
                }
                for (i = 0; i < _handlers; i++) {
                    _handlers[i].apply(me, arguments);
                }

                return true;
            }
        }

        for (_name in _levels) {
            me[_name.toLowerCase()] = (function () {
                var l = _name;
                return function () {
                    return _log(l, arguments);
                }
            }());
        }

        me.tick = function () {
            return _tick = new Tick(me);
        }

        me.tack = function () {
            if (!_tick) {
                return this.error('Logger.tack() must be invoked after Logger.tick()');
            }
            return _tick.tack.apply(this, arguments);
        }

        me.forClass = function (className) {
            var childLogger = new Logger(className, _level, _handlers);
            _childLoggers.push(childLogger);
            return childLogger;
        }

        me.forObject = function (className, id) {
            return this.forClass(className + '-' + (id || ++_objectIdSeed));

        }

        me.setLevel = function(level) {
            var i;

            _level = level = _normalizeLevel(level);

            for (i = 0; i < _childLoggers.length; i++) {
                _childLoggers[i].setLevel(level);
            }
        }

        me.addHandler = function(handlerFn) {
            var i;

            _handlers.push(handlerFn);
            for (i = 0; i < _childLoggers.length; i++) {
                _childLoggers[i].addHandler(handlerFn);
            }
        }
    }

    ST.logger = new Logger(null, 'INFO');
    ST.tick = ST.logger.tick();
}());
