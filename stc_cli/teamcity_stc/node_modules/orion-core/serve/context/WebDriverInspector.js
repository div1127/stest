/* eslint-env es6, node */
(function () {
    var logger = ST.logger.forClass('context/WebDriverInspector'),
        debug = ST.debug,
        POLL_INTERVAL = 500;       // interval at which to check for clicks in the browser

    ST.context.WebDriverInspector = ST.define({
        extend: ST.context.WebDriver,
        
        constructor: function (config) {
            var me = this

            // add Inspect js files to existing list
            me._STFiles.push('inspector/Inspect.js')

            ST.context.WebDriverInspector.superclass.constructor.call(me, config);
        },

        toggleInspectEnabled: function (msg) {
            logger.trace('.toggleInspectEnabled', msg);
            var me = this,
                toggleInspectEnabled = me.remoteHelpers.toggleInspectEnabled,
                enable = msg.value;

            if (!toggleInspectEnabled) {
                toggleInspectEnabled = me.remoteHelpers.toggleInspectEnabled = {
                    name: 'toggleInspectEnabled',
                    async: false,
                    needST: true,
                    fn: function (msg) {
                        return ST.defaultContext.toggleInspectEnabled(msg);
                    }
                }
            }
            return me.executeScript(toggleInspectEnabled,msg).then(function (ret) {
                if (enable) {
                    me.pollInspector();
                }
            })
        },

        inspectBatch: function (msg) {
            logger.trace('.inspectBatch', msg);
            var me = this,
                inspectBatch = me.remoteHelpers.inspectBatch;

            if (!inspectBatch) {
                inspectBatch = me.remoteHelpers.inspectBatch = {
                    name: 'inspectBatch',
                    async: false,
                    needST: true,
                    fn: function (msg) {
                        return ST.defaultContext.inspectBatch(msg);
                    }
                }
            }
            return me.executeScript(inspectBatch,msg).then(function (ret) {
                return ret.value;
            });
        },

        inspectQuery: function (msg) {
            logger.trace('.inspectQuery', msg);
            var me = this,
                inspectQuery = me.remoteHelpers.inspectQuery;

            if (!inspectQuery) {
                inspectQuery = me.remoteHelpers.inspectQuery = {
                    name: 'inspectQuery',
                    async: false,
                    needST: true,
                    fn: function (msg) {
                        return ST.defaultContext.inspectQuery(msg);
                    }
                }
            }
            return me.executeScript(inspectQuery,msg).then(function (ret) {
                return ret.value;
            });
        },

        inspectAllProperties: function (msg) {
            logger.trace('.inspectAllProperties', msg);
            var me = this,
                inspectAllProperties = me.remoteHelpers.inspectAllProperties,
                driver = me.driver,
                elId = msg.elId,
                properties = [];

            if (!inspectAllProperties) {
                inspectAllProperties = me.remoteHelpers.inspectAllProperties = {
                    name: 'inspectAllProperties',
                    async: false,
                    needST: true,
                    fn: function (msg) {
                        return ST.defaultContext.inspectAllProperties(msg)
                    }
                }
            }
            return me.executeScript(inspectAllProperties,msg).then(function (ret) {
                return ret.value;
            });
        },

        pollInspector: function () {
            logger.trace('.pollInspector');
            var me = this,
                pollInspector = me.remoteHelpers.pollInspector;

            if (!pollInspector) {
                pollInspector = me.remoteHelpers.pollInspector = {
                    name: 'pollInspector',
                    needST: true,
                    fn: function () {
                        var inspector = ST.inspector.Inspect.getInstance();
                        data = inspector.socketEventQueue.splice(0);
                        return data;
                    }
                }
            }

                logger.trace('.pollInspector');
                me.executeScript(pollInspector).then(function (ret) {
                    logger.trace('.pollInspector ret.value=',ret.value);

                    var queue = ret.value;
                    logger.trace('.pollInspector queue.length='+queue.length);

                    if (queue && queue.length > 0) {
                        logger.trace('.pollInspector got queue.length='+queue.length);
                        queue.forEach(function (data) {
                            var msg = data.data;
                            msg.type = data.event;
                            logger.trace('.pollInspector sending msg=',msg);
                            ST.sendMessage(msg);
                        });
                    }
                    ST.defer(me.pollInspector, me, POLL_INTERVAL);
                }).catch(function (err) {
                    logger.trace('.pollInspector err='+JSON.stringify(err));
                    ST.defer(me.pollInspector, me, POLL_INTERVAL);
                })
        },

        refreshTrees: function () {
            logger.trace('.refreshTrees');
            var me = this,
                refreshTrees = me.remoteHelpers.refreshTrees;

            if (!refreshTrees) {
                refreshTrees = me.remoteHelpers.refreshTrees = {
                    name: 'refreshTrees',
                    needST: true,
                    fn: function () {
                        var inspector = ST.inspector.Inspect.getInstance();
                        inspector.componentTree = null;
                        return {
                            componentTree: JSON.stringify(inspector.getComponentTree()),
                            domTree: JSON.stringify(inspector.getDomTree()),
                            url: window.location.toString()
                        }
                    }
                }
            }

            me.executeScript(refreshTrees).then(function (ret) {
                logger.trace('.refreshTrees, ret.value=',ret.value);
                ret.value.type = 'inspectEvent';
                ST.sendMessage(ret.value);
            }).catch(function (err) {
                logger.error('refreshTrees got error:'+err);
                ST.defaultContext.stopRecording();
            })
        },

        startInspector: function () {
            logger.trace('.startInspector');
            var me = this,
                startInspector = me.remoteHelpers.startInspector;
            
            if (!startInspector) {
                startInspector = me.remoteHelpers.startInspector = {
                   name: 'startInspector',
                   async: false,
                   needST: true,
                   fn: function () {
                       var inspector = ST.inspector.Inspect.getInstance();
                       return {
                           type: 'inspectEvent',
                           componentTree: JSON.stringify(inspector.getComponentTree()),
                           domTree: JSON.stringify(inspector.getDomTree()),
                           url: window.location.toString()
                       };
                   } 
                }
            }

            me.executeScript(startInspector).then(function (ret) {
                ST.sendMessage(ret.value);
                me.pollInspector();
            }).catch(function (err) {
                logger.error('startInspector got error:'+err);
                ST.defaultContext.stopRecording();
            });
        },

        stopRecording: function () {
            logger.trace('.stopRecording');
            this.stop();
        }
    })
}());