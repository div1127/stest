//-----------------------------------------------------------------------
// Ext._beforereadyhandler is called very early on Ext JS initialization,
// so we use it to block ST immediately in case the framework is
// present and unblock it once it's ready. But that's not the end of the
// story - see orion.js afterFiles().
(function () { 
    
var logger = ST.logger.forClass('setup-ext');
var hasExt = window.Ext;

if (hasExt) {
    logger.debug('Ext = ', Ext);
    logger.debug('Ext.isReady =' + Ext.isReady);
} else {
    logger.debug('Ext is undefined at initial check');
}

ST.isClassical = function () {
    if (typeof ST.isClassic === 'undefined') {
        ST.initExtJS();
    }
    logger.debug('ST.isClassic =' + ST.isClassic);
    return ST.isClassic;
}

// TODO shouldn't we ST.ready.block() before ALL of this??? and then let it fly?
ST.initExtJS = function () {
    logger.trace('.initExtJS');
    logger.debug('Ext.getVersion =', Ext.getVersion);
    var is51PointerMode, is62PointerMode, isPointerMode, isExtReact;

    ST.logger.debug('ST.initExtJS(), Ext.getVersion='+Ext.getVersion);
    ST.Ext = Ext; // feature detector for Ext JS (since we created the global)
    if (Ext.getVersion) {
        ST.isModern = Ext.isModern;
        ST.isTouch = !!Ext.versions.touch;
        ST.isClassic = !ST.isModern && !ST.isTouch;
        ST.sdkVersion = new ST.Version(Ext.getVersion().version);

        // detect, based on version, if "pointerMode" fixes exist in the framework
        // in 5.1 branch
        is51PointerMode = ST.sdkVersion.isGreaterThanOrEqual('5.1.4.348') && ST.sdkVersion.isLessThan('6.0');

        // 6.2.x and above
        is62PointerMode = ST.sdkVersion.isGreaterThanOrEqual('6.2.2.244');
        
        // ExtReact currently presents its version number as a 1-digit version number without any minor/patch/build parts.
        // If version is just '6', assume it's ExtReact and it includes pointer fixes.
        isExtReact = Ext.getVersion().version === '6';

        isPointerMode = is51PointerMode || is62PointerMode || isExtReact;

        // update the supports object based on new value
        ST.supports._updateFromExt(isPointerMode);

        if (ST.isIE && ST.isClassic && ST.sdkVersion.isGreaterThanOrEqual('5.0.0') && ST.sdkVersion.isLessThan('6.2')) {
            // For Internet Explorer, Ext JS 5.x and 6.0.x maps the 'click' event to 'tap' and 'dblclick' to 
            // 'doubletap', which will prevent the injected ST.play 'click' and 'dblclick' events from firing 
            // on those versions of Ext JS in Internet Explorer. This was fixed in Ext JS 6.2.0.
            Ext.onReady(function () {
                Ext.dom.Element.prototype.eventMap.dblclick = 'dblclick';
                Ext.dom.Element.prototype.eventMap.click = 'click';
            });
        }
    }
    logger.debug('ST.isClassic =', ST.isClassic);
}

// If Ext is already defined and is ready, just proceed to set everything up
if (hasExt && Ext.isReady) {
    logger.debug('Ext && Ext.isReady so call ST.initExtJS in 10 ms');
    setTimeout(ST.initExtJS, 10);
} 
// otherwise, use _beforereadyhandler
else {
    logger.debug('set _beforereadyhandler function, Ext =', window.Ext);
    Ext = window.Ext || {}; // eslint-disable-line

    Ext._beforereadyhandler = function() {
        logger.trace('._beforereadyhandler');
        ST.initExtJS();
        ST.ready.block();

        Ext.onReady(function () {
            logger.trace('Ext.onReady()');
            ST.defer(function() {
                // Slightly delayed to ensure that this runs after any user onReady
                // handlers.  This approach is preferred over using the priority option
                // because it works with all versions of the framework.
                ST.ready.unblock();
            }, 100);
        });
    };
}

}());
