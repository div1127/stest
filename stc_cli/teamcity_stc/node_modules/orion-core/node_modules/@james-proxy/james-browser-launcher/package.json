{
  "_args": [
    [
      {
        "raw": "@james-proxy/james-browser-launcher@github:sencha/james-browser-launcher#test-2.2.x",
        "scope": "@james-proxy",
        "escapedName": "@james-proxy%2fjames-browser-launcher",
        "name": "@james-proxy/james-browser-launcher",
        "rawSpec": "github:sencha/james-browser-launcher#test-2.2.x",
        "spec": "github:sencha/james-browser-launcher#test-2.2.x",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:sencha/james-browser-launcher.git#test-2.2.x",
          "sshUrl": "git+ssh://git@github.com/sencha/james-browser-launcher.git#test-2.2.x",
          "httpsUrl": "git+https://github.com/sencha/james-browser-launcher.git#test-2.2.x",
          "gitUrl": "git://github.com/sencha/james-browser-launcher.git#test-2.2.x",
          "shortcut": "github:sencha/james-browser-launcher#test-2.2.x",
          "directUrl": "https://raw.githubusercontent.com/sencha/james-browser-launcher/test-2.2.x/package.json"
        }
      },
      "/home/teamcity/buildAgent/work/f3df16e2a7e3ff02/orion-core"
    ]
  ],
  "_from": "sencha/james-browser-launcher#test-2.2.x",
  "_id": "@james-proxy/james-browser-launcher@1.3.2",
  "_inCache": true,
  "_location": "/@james-proxy/james-browser-launcher",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@james-proxy/james-browser-launcher@github:sencha/james-browser-launcher#test-2.2.x",
    "scope": "@james-proxy",
    "escapedName": "@james-proxy%2fjames-browser-launcher",
    "name": "@james-proxy/james-browser-launcher",
    "rawSpec": "github:sencha/james-browser-launcher#test-2.2.x",
    "spec": "github:sencha/james-browser-launcher#test-2.2.x",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:sencha/james-browser-launcher.git#test-2.2.x",
      "sshUrl": "git+ssh://git@github.com/sencha/james-browser-launcher.git#test-2.2.x",
      "httpsUrl": "git+https://github.com/sencha/james-browser-launcher.git#test-2.2.x",
      "gitUrl": "git://github.com/sencha/james-browser-launcher.git#test-2.2.x",
      "shortcut": "github:sencha/james-browser-launcher#test-2.2.x",
      "directUrl": "https://raw.githubusercontent.com/sencha/james-browser-launcher/test-2.2.x/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/sencha/james-browser-launcher.git#d3dd4399d80be69627a4c5c6a271282dc883a60b",
  "_shasum": "9b25f7d676994144dbd3dc0a98c49a3b2661be38",
  "_shrinkwrap": null,
  "_spec": "@james-proxy/james-browser-launcher@github:sencha/james-browser-launcher#test-2.2.x",
  "_where": "/home/teamcity/buildAgent/work/f3df16e2a7e3ff02/orion-core",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "ava": {
    "failFast": true,
    "files": [
      "test/**/*.js"
    ]
  },
  "bugs": {
    "url": "https://github.com/james-proxy/james-browser-launcher/issues"
  },
  "contributors": [
    {
      "name": "CKSource",
      "url": "http://cksource.com/"
    },
    {
      "name": "benderjs"
    },
    {
      "name": "mitchhentges"
    }
  ],
  "dependencies": {
    "headless": "^1.0.0",
    "lodash.assign": "^4.0.9",
    "lodash.omit": "^4.3.0",
    "lodash.pick": "^4.2.1",
    "mkdirp": "^0.5.0",
    "osenv": "^0.1.0",
    "rimraf": "~2.6.1",
    "simple-plist": "^0.3.0",
    "uid": "0.0.2",
    "win-detect-browsers": "github:sencha/win-detect-browsers#test-2.2.x"
  },
  "description": "Detect, launch and stop browser versions",
  "devDependencies": {
    "ava": "^0.25.0",
    "eslint": "^5.6.0",
    "eslint-config-airbnb-base": "^13.1.0",
    "eslint-plugin-import": "^2.7.0"
  },
  "directories": {
    "example": "example",
    "res": "res"
  },
  "engine": {
    "node": ">=0.8"
  },
  "eslintConfig": {
    "extends": "airbnb-base/legacy",
    "rules": {
      "no-console": 0,
      "comma-dangle": 0,
      "consistent-return": 0,
      "func-names": 0,
      "linebreak-style": 0,
      "max-len": [
        "error",
        120
      ],
      "no-continue": 0,
      "no-param-reassign": 0,
      "no-underscore-dangle": 0,
      "no-plusplus": 0,
      "quote-props": 0,
      "valid-jsdoc": [
        "error",
        {
          "requireReturn": false
        }
      ],
      "vars-on-top": 0
    },
    "globals": {}
  },
  "gitHead": "d3dd4399d80be69627a4c5c6a271282dc883a60b",
  "homepage": "https://github.com/james-proxy/james-browser-launcher",
  "keywords": [
    "browser",
    "headless",
    "phantom",
    "chrome",
    "firefox",
    "chromium",
    "safari",
    "ie",
    "opera",
    "osx",
    "windows"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "@james-proxy/james-browser-launcher",
  "optionalDependencies": {},
  "readme": "# james-browser-launcher [![Build Status](https://travis-ci.org/james-proxy/james-browser-launcher.svg?branch=master)](https://travis-ci.org/james-proxy/james-browser-launcher) [![Get it on npm](https://img.shields.io/npm/v/@james-proxy/james-browser-launcher.svg)](https://www.npmjs.com/package/@james-proxy/james-browser-launcher)\n\nDetect the browser versions available on your system and launch them in an\nisolated profile for automated testing purposes.\n\nYou can launch browsers headlessly\n(using [Xvfb](http://en.wikipedia.org/wiki/Xvfb) or with [PhantomJS](http://phantomjs.org/)) and set the proxy\nconfiguration on the fly.\n\nAt the beginning of time, there was [substack/browser-launcher](https://github.com/substack/browser-launcher),\nand all was well with the world. However, life happened, and the project became unmaintained.\nOut of the ashes, a leader emerged, and promised the citizens of `npm` that `browser-launcher` would become great again,\nbut under a new banner: [`browser-launcher2`](https://github.com/benderjs/browser-launcher2).\nThe world was once again prosperous, until we were eventually notified that\n[the king had forsaken us](https://github.com/benderjs/browser-launcher2/pull/45#issuecomment-147356133) (which\nhappens, it's open source, and `benderjs` did a lot for the community, which is awesome!)\n\nAnyways, due to the project's dependence on `browser-launcher2`, `james-proxy` forked the project to make some\nmuch-needed updates and fix some problems.\n\n## Differences from *browser-launcher*\n\n- contains fixes and pull requests for unresolved issues reported in original repository\n- `launcher.browsers` is an array of local browsers only, not an object as it was before\n- `launch` callback returns an `Instance` instead of a child process, see API section for more details\n- uses [win-detect-browsers](https://github.com/vweevers/win-detect-browsers) for browser detection on Windows\n- more browsers supported\n\n## Differences from *browser-launcher2*\n\n- This repository is not dead\n- See [`CHANGELOG.md`](CHANGELOG.md)\n\n## Supported browsers\n\nThe goal for this module is to support all major browsers on every desktop platform.\n\nAt the moment, `james-browser-launcher` supports following browsers on Windows, Unix and OS X:\n\n- Chrome\n- Chromium\n- Firefox\n- IE (Windows only)\n- Opera\n- Safari\n- PhantomJS\n\n## Install\n\n```\nnpm install @james-proxy/james-browser-launcher\n```\n\n## Example\n\n### Browser launch\n\n```js\nvar launcher = require( 'james-browser-launcher' );\n\nlauncher( function( err, launch ) {\n\tif ( err ) {\n\t\treturn console.error( err );\n\t}\n\n\tlaunch( 'http://cksource.com/', 'chrome', function( err, instance ) {\n\t\tif ( err ) {\n\t\t\treturn console.error( err );\n\t\t}\n\n\t\tconsole.log( 'Instance started with PID:', instance.pid );\n\n\t\tinstance.on( 'stop', function( code ) {\n\t\t\tconsole.log( 'Instance stopped with exit code:', code );\n\t\t} );\n\t} );\n} );\n```\n\nOutputs:\n\n```\n$ node example/launch.js\nInstance started with PID: 12345\nInstance stopped with exit code: 0\n```\n\n### Browser launch with options\n\n```js\nvar launcher = require( 'james-browser-launcher' );\n\nlauncher( function( err, launch ) {\n\t// ...\n\tlaunch(\n\t\t'http://cksource.com/',\n\t\t{\n\t\t\tbrowser: 'chrome',\n\t\t\tnoProxy: [ '127.0.0.1', 'localhost' ],\n\t\t\toptions: [\n\t\t\t\t'--disable-web-security',\n\t\t\t\t'--disable-extensions'\n\t\t\t]\n\t\t},\n\t\tfunction( err, instance ) {\n\t\t\t// ...\n\t\t}\n\t);\n} );\n```\n\n\n### Browser detection\n```js\nvar launcher = require( '../' );\n\nlauncher.detect( function( available ) {\n\tconsole.log( 'Available browsers:' );\n\tconsole.dir( available );\n} );\n```\n\nOutputs:\n\n```bash\n$ node example/detect.js\nAvailable browsers:\n[ { name: 'chrome',\n\t\tversion: '36.0.1985.125',\n\t\ttype: 'chrome',\n\t\tcommand: 'google-chrome' },\n\t{ name: 'chromium',\n\t\tversion: '36.0.1985.125',\n\t\ttype: 'chrome',\n\t\tcommand: 'chromium-browser' },\n\t{ name: 'firefox',\n\t\tversion: '31.0',\n\t\ttype: 'firefox',\n\t\tcommand: 'firefox' },\n\t{ name: 'phantomjs',\n\t\tversion: '1.9.7',\n\t\ttype: 'phantom',\n\t\tcommand: 'phantomjs' },\n\t{ name: 'opera',\n\t\tversion: '12.16',\n\t\ttype: 'opera',\n\t\tcommand: 'opera' } ]\n```\n\n### Detaching the launched browser process from your script\n\nIf you want the opened browser to remain open after killing your script, first, you need to set `options.detached` to `true` (see the API). By default, killing your script will kill the opened browsers.\n\nThen, if you want your script to immediately return control to the shell, you may additionally call `unref` on the `instance` object in the callback:\n\n```js\nvar launcher = require('james-browser-launcher');\nlauncher( function (err, launch) {\n\tlaunch( 'http://example.org/', {\n\t\tbrowser: 'chrome',\n\t\tdetached: true\n    }, function( err, instance ) {\n\t\tif ( err ) {\n\t\t\treturn console.error( err );\n\t\t}\n\n\t\tinstance.process.unref();\n\t\tinstance.process.stdin.unref();\n\t\tinstance.process.stdout.unref();\n\t\tinstance.process.stderr.unref();\n\t} );\n});\n```\n\n## API\n\n``` js\nvar launcher = require('james-browser-launcher');\n```\n\n### `launcher([configPath], callback)`\n\nDetect available browsers and pass `launch` function to the callback.\n\n**Parameters:**\n\n- *String* `configPath` - path to a browser configuration file *(Optional)*\n- *Function* `callback(err, launch)` - function called with `launch` function and errors (if any)\n\n### `launch(uri, options, callback)`\n\nOpen given URI in a browser and return an instance of it.\n\n**Parameters:**\n\n- *String* `uri` - URI to open in a newly started browser\n- *Object|String* `options` - configuration options or name of a browser to launch\n- *String* `options.browser` - name of a browser to launch\n- *String* `options.version` - version of a browser to launch, if none was given, the highest available version will be launched\n- *String* `options.proxy` - URI of the proxy server\n- *Array* `options.options` - additional command line options\n- *Boolean* `options.skipDefaults` - don't supply any default options to browser\n- *Boolean* `options.detached` - if true, then killing your script will not kill the opened browser\n- *Array|String* `options.noProxy` - An array of strings, containing proxy routes to skip over\n- *Boolean* `options.headless` - run a browser in a headless mode (only if **Xvfb** available)\n- *Function* `callback(err, instance)` - function fired when started a browser `instance` or an error occurred\n\n### `launch.browsers`\n\nThis property contains an array of all known and available browsers.\n\n### `instance`\n\nBrowser instance object.\n\n**Properties:**\n- *String* `command` - command used to start the instance\n- *Array* `args` - array of command line arguments used while starting the instance\n- *String* `image` - instance's image name\n- *String* `processName` - instance's process name\n- *Object* `process` - reference to instance's process started with Node's `child_process.spawn` API\n- *Number* `pid` - instance's process PID\n- *Stream* `stdout` - instance's process STDOUT stream\n- *Stream* `stderr` - instance's process STDERR stream\n\n**Events:**\n- `stop` - fired when instance stops\n\n**Methods:**\n- `stop(callback)` - stop the instance and fire the callback once stopped\n\n### `launcher.detect(callback)`\n\nDetects all browsers available.\n\n**Parameters:**\n- *Function* `callback(available)` - function called with array of all recognized browsers\n\nEach browser contains following properties:\n- `name` - name of a browser\n- `version` - browser's version\n- `type` - type of a browser i.e. browser's family\n- `command` - command used to launch a browser\n\n### `launcher.update([configFile], callback)`\n\nUpdates the browsers cache file (`~/.config/james-browser-launcher/config.json` is no `configFile` was given) and creates new profiles for found browsers.\n\n**Parameters:**\n- *String* `configFile` - path to the configuration file *Optional*\n- *Function* `callback(err, browsers)` - function called with found browsers and errors (if any)\n\n## Known Issues\n\n- IE8: after several starts and stops, if you manually open IE it will come up with a pop-up asking if we want to restore tabs (#21)\n- Chrome @ OSX: it's not possible to launch multiple instances of Chrome at once\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/james-proxy/james-browser-launcher.git"
  },
  "scripts": {
    "lint": "eslint ./example ./lib",
    "lint-fix": "npm run lint -- --fix",
    "test": "ava"
  },
  "version": "1.3.2"
}
