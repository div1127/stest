'use strict';

const { Script } = require('vm');
const fs = require('fs');
const path = require('path');
    
const serveDir = path.normalize(__dirname + '/../../serve/');
const serveScripts = [
    'logger.js',
    'init.js',
    'debug.js',
    'supports.js',
    'base.js',
    'common.js',
    'context/Base.js',
    'context/Custom.js',
    'context/Local.js',
    'context/WebDriver.js',
    'context/WebDriverRecorder.js',
    'context/WebDriverInspector.js',
    'Version.js',
    'Browser.js',
    'OS.js',
    'Element.js',
    'Timer.js',
    'KeyMap.js',
    'Alert.js',
    'Url.js',
    'event/Event.js',
    'event/wgxpath.install.js',
    'Locator.js',
    'locator/Strategy.js',
    'event/Driver.js',
    'event/Event.js',
    'event/Injector.js',
    'playable/Playable.js',
    'playable/State.js',
    'event/Player.js',
    'event/Recorder.js',
    'event/MagicCanvasRecorder.js',
    '/event/GestureQueue.js',
    'future/Element.js',
    'future/Component.js',
    'pageobject/Manager.js',
    'pageobject/Base.js',
    'orion.js'
]

function createDom (html, loadServeScripts) {
    var { JSDOM } = require('jsdom'),
        dom = new JSDOM(html, { runScripts: 'dangerously' }),
        window = dom.window;
    
    Object.assign(window, {
        require: require,
        wgxpath: {
            install: () => { } // dummy for Locator init
        },
        Ext: { },
        ST: {
            event: { },
            options: {
                failOnMultipleMatches: true
            }
        }
    });
    
    if (loadServeScripts !== false) {
        evalServeScripts(dom);
    }
    
    return dom;
}

function createScript (fn) {
    if (typeof fn === 'function' || fn.startsWith('function')) {
        fn = `(${fn})`;
    } else {
        fn = `(function () { ${fn} })`;
    }
    return new Script(fn);
}

function evalServeScripts (dom, scriptPaths) {
    scriptPaths = scriptPaths || serveScripts;
    
    for (let scriptPath of scriptPaths) {
        scriptPath = serveDir + scriptPath;
        
        let scriptContent = fs.readFileSync(scriptPath),
            script = new Script(scriptContent, { filename: scriptPath });
        
        dom.runVMScript(script);
    }
}

module.exports.createDom = createDom;
module.exports.createScript = createScript;
module.exports.evalServeScripts = evalServeScripts;
module.exports.serveDir = serveDir;
