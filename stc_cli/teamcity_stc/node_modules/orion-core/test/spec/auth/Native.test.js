"use strict";

const Native = require('orion-core/lib/auth/Native');


describe('Native', function () {
    var auth, creds = {
        key: 'Bucket',
        username: 'testy.mctesteron',
        password: 'P@s$wOrd!'
    };

    afterEach(function () {
        auth.delete();
        auth = null;
    });

    describe('add()', function () {
        it('should insert credentials', function () {
            auth = new Native(creds);
            auth.add();
            expect(auth.exists()).toBe(true);
        });
    });

    describe('replace()', function () {
        it('should replace credentials', function () {
            var pword = creds.password;

            auth = new Native(creds);
            auth.add();
            // verify the existence of the original password
            expect(auth.exists()).toBe(true);
            expect(auth.get()).toBe('P@s$wOrd!');
            // change password
            auth.password = 'newPassword';
            auth.replace();
            // check new password
            expect(auth.exists()).toBe(true);
            expect(auth.get()).toBe('newPassword');
        });
    });

    describe('delete()', function () {
        it('should remove credentials', function () {
            auth = new Native(creds);
            auth.add();
            // verify the existence of the original password
            expect(auth.exists()).toBe(true);
            expect(auth.get()).toBe('P@s$wOrd!');
            // delete the creds
            auth.delete();
            expect(auth.exists()).toBe(false);
        });
    });

    describe('get()', function () {
        it('should retrieve password', function () {
            auth = new Native(creds);
            auth.add();

            expect(auth.get()).toBe('P@s$wOrd!');
        });
    });

    describe('exists()', function () {
        it('should return true for valid credentials', function () {
            auth = new Native(creds);
            auth.add();

            expect(auth.exists()).toBe(true);
        });

        it('should return false for no match', function () {
            auth = new Native(creds);
            auth.add();
            // delete creds
            auth.delete();

            expect(auth.exists()).toBe(false);
        });
    });

    describe('storageKey', function () {
        it('should return a concatentation of the base key plus user-provided key', function () {
            auth = new Native(creds);
            auth.add();

            expect(auth.storageKey).toBe('ST_AUTH_' + auth.key);
        });
    });
});
