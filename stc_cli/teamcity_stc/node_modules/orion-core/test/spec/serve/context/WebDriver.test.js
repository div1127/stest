"use strict";

describe('WebDriver', function () {
    const { createDom, serveDir, evalServeScripts, createScript } = require('../../../helper/jsdom-util');
    const { logger } = require('../../../helper/logger-util');
    
    beforeEach(function* () {
        var me = this,
            sandboxDom = createDom(null, false),
            browserDom = createDom(null, false),
            driver = {
                init:       function () { return driver },
                addCommand: function () { return driver },
                timeouts:   function () { return driver },
                url:        function () { return driver },
                then:       function (callback) { return Promise.resolve(callback()) },
                execute: function (fn, ...args) {
                    var script = createScript(fn),
                        value;
                    
                    try {
                        value = browserDom.runVMScript(script)(...args);
                        return Promise.resolve({
                            value: value
                        });
                    } catch (err) {
                        return Promise.reject(err);
                    }
                },
                executeAsync: function (fn, ...args) {
                    var script = createScript(fn),
                        value;
                    
                    return new Promise(function (resolve, reject) {
                        function callback (value) {
                            resolve({
                                value: value
                            });
                        }
                        args.push(callback);
                        try {
                            browserDom.runVMScript(script)(...args);
                        } catch (err) {
                            return reject(err);
                        }
                    });
                }
            },
            _ST;
        
        Object.assign(sandboxDom.window, {
            require: require,
            ST: {
                isSandbox: true,
                serveDir: serveDir,
                logger: logger,
                webdriverio: {
                    remote: function () {
                        return driver;
                    }
                },
                UglifyJS: require('uglify-js')
            }
        });
        
        
        evalServeScripts(sandboxDom, [
            'init.js',
            'debug.js',
            'supports.js',
            'base.js',
            'common.js',
            'context/Base.js',
            'context/WebDriver.js',
            'context/WebDriverRecorder.js',
            'context/WebDriverInspector.js',
            'Version.js',
            'Browser.js',
            'OS.js'
        ]);
        
        _ST = sandboxDom.window.ST;
        _ST.defaultContext = new _ST.context.WebDriver();
        yield _ST.defaultContext.init();
        
        me.sandboxWindow = sandboxDom.window;
        me.browserWindow = browserDom.window;
    });
    
    function syncAdd () {
        return function (a, b) {
            return a + b;
        }
    }
    
    function asyncAdd () {
        return function (a, b, callback) {
            setTimeout(function () {
                callback(a + b);
            }, 1000);
        }
    }
    
    describe('excuteScript', function () {
        
        it('recreates cache as needed', function* () {
            var me = this,
                browserWin = me.browserWindow,
                sandboxWin = me.sandboxWindow,
                context = sandboxWin.ST.defaultContext,
                fnCtx = { fn: syncAdd() },
                result;
            
            // this is what happens after a navigation or reload
            delete browserWin.___stcache;
            
            result = yield context.executeScript(fnCtx, 2, 3);
            
            expect(typeof fnCtx.id).toEqual('number');
            expect(result.value).toBe(5);
            expect(browserWin.___stcache).toBeDefined();
            expect(typeof browserWin.___stcache[`f${fnCtx.id}`]).toEqual('function');
        });
        
        it('reloads ST as needed', function* () {
            var me = this,
                browserWin = me.browserWindow,
                sandboxWin = me.sandboxWindow,
                context = sandboxWin.ST.defaultContext,
                fnCtx = { 
                    fn: syncAdd(),
                    needST: true
                },
                result;
            
            // this is what happens after a navigation or reload
            browserWin.___stcache = undefined;
            browserWin.ST = undefined;
            
            result = yield context.executeScript(fnCtx, 2, 3);
            
            expect(typeof fnCtx.id).toEqual('number');
            expect(result.value).toBe(5);
            expect(browserWin.ST).toBeDefined();
            expect(browserWin.___stcache).toBeDefined();
            expect(typeof browserWin.___stcache[`f${fnCtx.id}`]).toEqual('function');
        });
        
        it('executes synchronous scripts', function* () {
            var context = this.sandboxWindow.ST.defaultContext,
                driver = context.driver,
                fnCtx = { fn: syncAdd() },
                result;
            
            spyOn(driver, 'execute').and.callThrough();
            result = yield context.executeScript(fnCtx, 2, 3);
            expect(result.value).toEqual(5);
            expect(driver.execute).toHaveBeenCalledWith(
                jasmine.any(String), 2, 3
            )
        });
        
        it('executes asynchronous scripts', function* () {
            var context = this.sandboxWindow.ST.defaultContext,
                driver = context.driver,
                fnCtx = { fn: asyncAdd() },
                result;
            
            spyOn(driver, 'executeAsync').and.callThrough();
            result = yield context.executeAsyncScript(fnCtx, 2, 3);
            expect(result.value).toEqual(5);
            expect(driver.executeAsync).toHaveBeenCalledWith(
                jasmine.any(String), 2, 3
            )
        });
        
        
        it('executes non-cached scripts', function* () {
            var context = this.sandboxWindow.ST.defaultContext,
                fnCtx = { 
                    fn: syncAdd(),
                    cache: false
                },
                result;

            result = yield context.executeScript(fnCtx, 2, 3);
            expect(fnCtx.id).toBeUndefined();
            expect(result).toBeDefined();
            expect(result.value).toEqual(5);
        });
        
        it('executes cached scripts', function* () {
            var context = this.sandboxWindow.ST.defaultContext,
                fnCtx = { 
                    fn: syncAdd() // cache is true by default
                },
                result, id;
            
            result = yield context.executeScript(fnCtx, 2, 3);
            expect(fnCtx.id).toBeDefined();
            expect(result).toBeDefined();
            expect(result.value).toEqual(5);
            
            id = fnCtx.id;
            
            result = yield context.executeScript(fnCtx, 3, 4);
            expect(fnCtx.id).toBe(id);
            expect(result).toBeDefined();
            expect(result.value).toEqual(7);
        });
        
        it('serializes arguments', function* () {
            var context = this.sandboxWindow.ST.defaultContext,
                driver = context.driver,
                fnCtx = { 
                    fn: syncAdd(),
                    serializeArgs: true
                },
                result;
            
            spyOn(driver, 'execute').and.callThrough();
            result = yield context.executeScript(fnCtx, 2, 3);
            expect(result.value).toEqual(5);
            expect(driver.execute).not.toHaveBeenCalledWith(
                jasmine.any(String), 2, 3
            )
        });
        
        it('parses results', function* () {
            var context = this.sandboxWindow.ST.defaultContext,
                driver = context.driver,
                fnCtx = { 
                    fn: function () {
                        return '{ "foo": 42 }'
                    },
                    parseResult: true
                },
                result;
            
            spyOn(driver, 'execute').and.callThrough();
            result = yield context.executeScript(fnCtx);
            expect(typeof result.value).toEqual('object');
            expect(result.value.foo).toBe(42);
        });
        
    });

});
