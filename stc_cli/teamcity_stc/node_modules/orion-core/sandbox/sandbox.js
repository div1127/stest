'use strict';

const {ipcRenderer, remote} = require('electron');
const runConfig = remote.getCurrentWindow().runConfig;
const logger = ST.logger = require('../lib/Logger').getInstance();

logger.addHandler((level, message) => {
    console.log(message); // eslint-disable-line
    ipcRenderer.send('log', level, message);
});
ipcRenderer.on('setLogLevel', (event, level, path) => {
    logger.setLevel(level, path);
});
logger.setLevel(runConfig.logLevel);
logger.info('Initializing Sencha Test sandbox');

const preventNavigation = function (e) {
    if (ST.defaultContext.driver) {
        ST.defaultContext.driver.url()
            .then(function () {
                // The target browser is still running. Prevent navigation/reloading of the Sandbox,
                // but make sure the target gets ST reloaded.
                e.returnValue = '';
                if (ST.defaultContext.isRecording) {
                    ST.defaultContext.initScrollSurface();
                    ST.defaultContext._loadST();
                }
                e.preventDefault();
            }, function (err) {
                console.log('err', err); // eslint-disable-line
                if (err.seleniumStack.status == 13 || err.seleniumStack.status == 23 || err.type === 'NoSessionIdError') {
                    // The browser window was closed from under us, close accordingly
                    window.removeEventListener('onbeforeunload', preventNavigation);
                    if (ST.defaultContext.isRecording) {
                        ST.defaultContext.stopRecording();
                    }
                }
            });
    }
};
window.addEventListener('onbeforeunload', preventNavigation);

const orionCoreLibs = [
    '../serve/init',
    '../serve/debug',
    '../serve/supports',
    '../serve/base',
    '../serve/common',
    '../serve/context/Base',
    '../serve/context/Custom',
    '../serve/context/Local',
    '../serve/context/WebDriver',
    '../serve/context/WebDriverRecorder',
    '../serve/context/WebDriverInspector',
    '../serve/Version',
    '../serve/Browser',
    '../serve/OS',
    '../serve/Element',
    '../serve/Timer',
    '../serve/KeyMap',
    '../serve/Alert',
    '../serve/Url',
    '../serve/event/Event',
    
    '../serve/event/wgxpath.install',
    '../serve/Locator',
    '../serve/locator/Strategy',
    '../serve/locator/Strategy',
    
    '../serve/event/Driver',
    '../serve/event/Event',
    '../serve/event/Injector',
    '../serve/playable/Playable',
    '../serve/playable/State',
    
    '../serve/event/Player',
    '../serve/event/Recorder',
    '../serve/event/MagicCanvasRecorder',
    '../serve/event/GestureQueue',
    
    '../serve/future/Element',
    '../serve/future/Component',
    '../serve/pageobject/Manager.js',
    '../serve/pageobject/Base.js',
    
    '../serve/orion'
];

window.Ext = window.Ext || {};
ST.runConfig = runConfig;
ST.runnerId = runConfig.runnerId;
ST.agentId = runConfig.agentId;

try {
    logger.info('Loading Sencha Test core');
    for (let file of orionCoreLibs) {
        require(file);
        logger.debug('Loaded', file);
    }

    const testFrameworks = {
        jasmine: [
            'jasmine-core/lib/jasmine-core/jasmine.js',
            '../serve/jasmine-orion',
            '../serve/jasmine-pre-extensions',
            '../serve/jasmine/boot',
            '../serve/jasmine-post-extensions',
            '../serve/Expect.js'
        ]
    };

    const testFramework = runConfig.testFramework;
    const testFrameworkFiles = testFrameworks[testFramework] || [];
    const scenarioDir = runConfig.scenarioDir;
    const scenarioLibs = runConfig.scenarioLibs || [];
    const pageObjects = runConfig.pageObjects || [];
    const testFiles = runConfig.testFiles || [];

    logger.info('Loading test framework');
    for (let file of testFrameworkFiles) {
        require(file);
        logger.debug('Loaded', file);
    }

    logger.info('Loading scenario libraries');
    for (let file of scenarioLibs) {
        require(file);
        logger.debug('Loaded', file);
    }

    logger.info('Loading page objects');
    for (let file of pageObjects) {
        require(file);
        logger.debug('Loaded', file);
    }

    logger.info('Loading test suites');
    ST.beforeFiles();
    for (let file of testFiles) {
        let scenarioBasedPath = file.substring(scenarioDir.length + 1);
        ST.beforeFile(scenarioBasedPath);
        require(file);
        ST.afterFile(scenarioBasedPath);
        logger.info('Loaded', file);
    }
    ST.afterFiles();

    logger.info('Sandbox initialized');
} catch (err) {
    logger.error(err.stack || err);
}


