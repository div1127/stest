"use strict";function _interopRequireDefault(a){return a&&a.__esModule?a:{"default":a}}var _promise=require("babel-runtime/core-js/promise"),_promise2=_interopRequireDefault(_promise),_getPrototypeOf=require("babel-runtime/core-js/object/get-prototype-of"),_getPrototypeOf2=_interopRequireDefault(_getPrototypeOf),_classCallCheck2=require("babel-runtime/helpers/classCallCheck"),_classCallCheck3=_interopRequireDefault(_classCallCheck2),_createClass2=require("babel-runtime/helpers/createClass"),_createClass3=_interopRequireDefault(_createClass2),_possibleConstructorReturn2=require("babel-runtime/helpers/possibleConstructorReturn"),_possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2),_inherits2=require("babel-runtime/helpers/inherits"),_inherits3=_interopRequireDefault(_inherits2),Observable=require("orion-core/lib/Observable"),JiraClient=require("orion-core/lib/integration/JiraClient"),RemoteClient=require("orion-core/lib/archive/Client"),logger=require("../Logger").getInstance().forClass("integration/Client"),Client=function(a){function b(){return(0,_classCallCheck3["default"])(this,b),(0,_possibleConstructorReturn3["default"])(this,(b.__proto__||(0,_getPrototypeOf2["default"])(b)).apply(this,arguments))}return(0,_inherits3["default"])(b,a),(0,_createClass3["default"])(b,null,[{key:"processIssues",value:function(a){var b=a.archivePath,c=a.archiveRoot,d=a.archiveServer,e=a.failures,f=a.buildNumber,g=a.storageKey,h=a.connection;return new _promise2["default"](function(a,i){var j=[],k=[],l=[],m=new RemoteClient({server:d}),n={jira:JiraClient},o=void 0,p=void 0,q=void 0;g&&(q={storageKey:g,archiveRoot:c},m.validateStorageKey(q).then(function(q){if(q.success){var r=h.type;if(logger.debug("Retrieving credential..."),!h.password)return i("User credentials could not be resolved.");logger.debug("Credential retrieved successfully"),o=n[r],p=new o(h),logger.debug("Initializing Client..."),p.init().then(function(){return logger.debug("Client initialized successfully"),logger.debug("Validating user ("+h.username+")..."),p.validateUser().then(function(){return logger.debug("User successfully validated: "+h.username),m.getMetarun({root:c,path:b,type:r})},function(a){logger.error(a.stack||a)}).then(function(i){return logger.debug("Metarun retrieved..."),e.forEach(function(a){var e=i.getIntegration(a.specPath),g=void 0;a.server={archiveRoot:c,archivePath:b,archiveServer:d,buildNumber:f},"undefined"!=typeof a.ignored?(g=a.ignored,e.ignored=!!a.ignored):g=!!e.ignored,g||e.issueId?g?logger.info("Spec failure for "+e.path.join("/")+" is ignored"):logger.info("Issue already exists: "+e.issueId):j.push(p.addIssue(h.project,a).then(function(b){e.issueId=a.issueId=b.key,b.id=a.id,k.push(b),l.push(e),logger.info("New issue successfully created: "+e.issueId)},function(a){logger.error(a.stack||a)}))}),_promise2["default"].all(j).then(function(){logger.debug("Integration promises have resolved"),m.saveMetarun({storageKey:g,path:b,metarun:i}).then(function(){logger.debug("Issue processing complete!"),a({url:p.url,issues:k,integrations:l})})})["catch"](function(a){logger.error(a.stack||a)})})["catch"](function(a){logger.error(a.stack||a)})})["catch"](function(a){i("There was an error connecting to the service. Please make sure you have a valid credential and that you have an active internet connection.")})}else i("Invalid storage key.")}))})}}]),b}(Observable);module.exports=Client;